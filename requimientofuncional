Requerimientos funcionales: describen qu√© debe hacer el sistema. Es decir, las tareas, servicios o comportamientos que el software debe permitir o ejecutar.

Requerimientos no funcionales: describen c√≥mo debe hacerlo el sistema, con qu√© calidad, bajo qu√© restricciones, con qu√© rendimiento, seguridad, confiabilidad, etc.

Caracter√≠sticas

Los funcionales suelen venir directamente de las necesidades del usuario o negocio: qu√© espera que el sistema le permita hacer. Ej: autenticaci√≥n, creaci√≥n de pedidos, generaci√≥n de reportes.
Los no funcionales pueden surgir de normas, est√°ndares, expectativas de calidad, regulaciones, limitaciones tecnol√≥gicas, etc. No especifican una acci√≥n directa del usuario, sino caracter√≠sticas del sistema que afectan experiencia, operatividad o mantenimiento.

Ejemplos

Funcionales:

El sistema debe permitir que un usuario se registre con nombre de usuario y contrase√±a.
Debe generarse un reporte mensual de ventas.
Los usuarios con rol ‚Äúgerente‚Äù pueden aprobar solicitudes.

No funcionales:

Tiempo de respuesta: el sistema debe responder a una solicitud en menos de 2 segundos.
Disponibilidad: estar activo (online) un 99,9‚ÄØ% del tiempo.
Usabilidad: interfaz clara, f√°cil de aprender.
Compatibilidad con varios dispositivos o navegadores.

Diferencias clave

Los funcionales son acciones espec√≠ficas, los no funcionales atributos de calidad o restricciones del sistema.
Los funcionales son m√°s f√°ciles de identificar al inicio del proyecto; los no funcionales muchas veces requieren atenci√≥n desde la arquitectura del sistema para que todo lo dem√°s pueda cumplir con sus est√°ndares.
En t√©rminos de pruebas:

Para funcionales ‚Üí pruebas unitarias, pruebas de integraci√≥n, de aceptaci√≥n que verifiquen que se cumpla la funcionalidad.
Para no funcionales ‚Üí pruebas de rendimiento, carga, seguridad, usabilidad, etc.

Importancia

Tener bien definidos los funcionales es esencial para que el sistema haga lo que tiene que hacer.
Tener bien definidos los no funcionales es imprescindible para que lo haga bien: que sea r√°pido, seguro, usable, mantenible, confiable.
Si ignor√°s los no funcionales, puede pasar que algo funcione pero sea tan lento, o inseguro, o dif√≠cil de usar, que termine siendo rechazado o genere muchos problemas.
Ambos tipos van de la mano: uno define lo que se necesita hacer, el otro ‚Äúla excelencia operativa‚Äù, digamos.





Requerimientos del sistema - Proyecto Registro de Personas

En este proyecto desarroll√© un sistema web que permite registrar personas ingresando su nombre, apellido y edad, y visualizar estos registros en una tabla din√°mica. A continuaci√≥n detallo los requerimientos funcionales y no funcionales que defin√≠ para su correcto funcionamiento:

‚úÖ Requerimientos Funcionales

Los requerimientos funcionales representan todo aquello que el sistema debe hacer para cumplir con su prop√≥sito. En mi caso, me enfoqu√© en que el sistema permita registrar y mostrar datos de forma clara y eficiente. Los principales son:

Registro de personas: El sistema permite agregar nuevas personas ingresando su nombre, apellido y edad a trav√©s de un formulario. Al presionar el bot√≥n ‚ÄúAgregar‚Äù o ‚ÄúIngresar‚Äù, los datos se almacenan en la base de datos.

Visualizaci√≥n en tabla: Todos los registros ingresados se muestran en una tabla que incluye las columnas: ID, nombre, apellido y edad. Esta tabla se actualiza autom√°ticamente al agregar un nuevo registro.

Generaci√≥n autom√°tica de ID: Cada persona registrada recibe un identificador √∫nico (ID) generado autom√°ticamente, que se incrementa con cada nuevo ingreso.

Validaci√≥n de campos: Antes de guardar un registro, el sistema valida que los campos no est√©n vac√≠os. Si falta alg√∫n dato, no se permite el env√≠o.

Mensajes de confirmaci√≥n: Al agregar correctamente un registro o al establecer la conexi√≥n con la base de datos, el sistema muestra mensajes como ‚ÄúConexi√≥n exitosa‚Äù o ‚ÄúNuevo registro agregado exitosamente‚Äù.

Soporte para nombres repetidos: El sistema permite ingresar personas con el mismo nombre o apellido sin generar errores.

Dos formularios funcionales: Incluye dos formularios de ingreso de datos funcionales (uno principal y uno alternativo), ambos v√°lidos para guardar personas.

‚öôÔ∏è Requerimientos No Funcionales

Los requerimientos no funcionales definen c√≥mo debe funcionar el sistema, considerando aspectos de calidad, rendimiento y experiencia del usuario. Para este proyecto consider√© los siguientes:

Usabilidad: La interfaz es simple, clara y f√°cil de usar. No se requiere experiencia t√©cnica para entender c√≥mo registrar personas.

Rendimiento: El sistema responde a las acciones del usuario en menos de 2 segundos, lo cual lo hace √°gil y eficiente.

Disponibilidad: El sistema est√° dise√±ado para estar disponible la mayor parte del tiempo, especialmente en horarios laborales, con una disponibilidad estimada del 99%.

Confiabilidad: Una vez que un registro se guarda correctamente, permanece en la base de datos y se mantiene incluso si se recarga la p√°gina.

Escalabilidad: Aunque es un sistema sencillo, puede soportar al menos 1000 registros sin afectar el rendimiento.

Compatibilidad: Funciona correctamente en los navegadores m√°s comunes como Google Chrome, Firefox, Edge y Safari.

Seguridad en entrada de datos: Se controla que los campos no contengan entradas maliciosas, como scripts o c√≥digo que pueda da√±ar el sistema o la base de datos.

Mantenibilidad: El sistema est√° programado de forma clara, con c√≥digo modular y organizado, pensado para poder ser modificado o mejorado f√°cilmente en el futuro.

Soporte para caracteres especiales: Se garantiza el correcto funcionamiento con letras en espa√±ol como la √±, tildes y otros caracteres especiales.

üß© Conclusi√≥n

Estos requerimientos me ayudaron a definir claramente el alcance y la calidad esperada del sistema. Al cumplirlos, me asegur√© de que el proyecto no solo hiciera lo que se espera (funcionalidad), sino que tambi√©n lo hiciera bien (calidad). El resultado es una aplicaci√≥n sencilla, pr√°ctica y f√°cil de usar para registrar y gestionar personas.
